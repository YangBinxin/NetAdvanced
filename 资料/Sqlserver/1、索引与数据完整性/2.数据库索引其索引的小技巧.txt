https://www.jb51.net/article/30654.htm
一、什么是索引
	使用索引是减少磁盘和逻辑读取次数最佳方法之一
	索引允许sqlserver在表中查找数据而不需要扫描整个表

	1.1 索引好处
	    当表中没有聚集索引时，为一堆未加工的数据，表数据没有顺序，只能逐行遍历。当存在聚集索引时，非聚集索引的指针由聚集索引所定义的值组成。

	1.2 索引开销
	    索引过多会引起 INSERT/UPDATE/DELETE花费更长的时间
	    对现有的生产系统，需要测量索引的总体影响，应保证性能带来的好处超过处理资源的额外成本。

二、索引设计建议
	2.1 检查where子句和连接条件列
	2.2 使用窄索引
	2.3 检查列的唯一性
	2.4 检查列的数据类型
	2.5 考虑列顺序
	2.6 考虑索引类型

三、聚簇索引建议： 
	1) 首先创建聚簇索引： 
	因为所有非聚簇索引在其索引行上保存聚簇索引键值，所以创建顺序非常重要。为了最好的性能，建议在创建任何非聚簇索引前创建聚簇索引。 
	2) 保持窄索引： 
	应保持聚簇索引总体的长度尽可能小。因为聚簇索引长度太大，那么非聚簇索引也会跟着增大。因此，大的聚簇索引键值不仅影响本身宽度，而且扩大表上的所有非聚簇索引，增加索引页面数量，增加逻辑读和磁盘I/O。
	3) 一步重建聚簇索引： 
	由于聚簇索引和非聚簇索引关联，所以使用DROP INDEX再CREATE INDEX将导致非聚簇索引建立两次，此时可以使用CREATE INDEX 语句的DROP_EXISTING子句在一个单独的原子步骤中重建聚簇索引，相似地可以在非聚簇索引中使用。 
	4) 何时使用一个聚簇索引： 
		a) 检索一定范围的数据： 
			由于聚簇索引是按物理顺序建立，索引合理利用能减少磁头的移动，减少物理I/O量。 
		b) 读取预先排序的数据： 
			对于需要排序的数据，聚簇索引非常有效，能减少数据读取后的排序开销。 
	5) 何时不使用聚簇索引： 
		在某些情况下最好不要使用聚簇索引： 
		a) 频繁更新的列： 
			如果列更新频繁，将导致非聚簇索引重新定位，增加相关操作查询的开销。还将阻塞这段时间引用相同部分和非聚簇索引的其他查询，从而影响数据并行性。 
		b) 宽的关键字：前面已经说明原因 
		c) 太多并行的顺序插入： 
			如果想并行插入新行，那么把它们分布在多个页面中会更好，有聚簇索引的话，所有插入都会集中在最后一页，形成巨大的“热点”，可以通过创建另一列上的索引（该索引不会将行按照新行相同的顺序来排序）来将插入操作随机分布在整个表，这个问题只在大量的同时插入时发生。如果磁盘热点成为性能瓶颈，那么可以通过降低表的填充因子来容纳到中间页面。这样热的页面将在内存中，也有利于性能。 

四、聚簇索引VS 非聚簇索引 
	选择聚簇索引或非聚簇索引主要考虑因素： 
	l 检索的行数量； 
	l 数据排序需求； 
	l 索引键宽度； 
	l 列更新频度； 
	l 书签开销； 
	l 任何磁盘热点；
	4.1、聚簇索引相对非聚簇索引的好处： 
		在没有索引的表上选择索引的类型时，聚簇索引通常是首选。 
		尽量使用具有高选择性的列读取小的结果集是该列上创建非聚簇索引很好的启示，但在同一列上的聚簇索引可能同样有利甚至更好。 
		注意：尽管许多数据检索中聚簇索引胜过非聚簇索引，但是一个表只有一个聚簇索引，因此，应当将聚簇索引保留在最有力的情况下。 
	4.2、非聚簇索引相对聚簇索引的好处： 
		非聚簇索引在以下情况优先于聚簇索引： 
		l 索引键尺寸很大。 
		l 为了避免聚簇索引重建时需要重建所有非聚簇索引的相关开销。 
		l 是数据库读取程序工作于非聚簇索引页面上，同时写入程序对数据页面中的其他列（不包括非聚簇索引中）进行修改以避免阻塞。 
		l 当查询所有引用列（来自一个表）可以安全地容纳非聚簇索引中时。 
		在不需要跳转到数据行的情况下，非聚簇索引的性能应该和聚簇索引一样好（甚至更好）。非聚簇索引键包含所有表中需要的列是有可能的。
 